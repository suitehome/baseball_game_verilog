`timescale 1ns / 1ps
// Reference book: "FPGA Prototyping by Verilog Examples"
//                    "Xilinx Spartan-3 Version"
// Authored by: Pong P. Chu
// Published by: Wiley, 2008
// Adapted for use on Basys 3 FPGA with Xilinx Artix-7
// by: David J. Marion aka FPGA Dude

module ascii_test(
    input clk,
    input video_on,
    input [9:0] x, y,
    output reg [11:0] rgb
    );
    
    // signal declarations
    wire [10:0] rom_addr;           // 11-bit text ROM address
    wire [6:0] ascii_char;          // 7-bit ASCII character code
    wire [3:0] char_row;            // 4-bit row of ASCII character
    wire [2:0] bit_addr;            // column number of ROM data
    wire [7:0] rom_data1,rom_data2,rom_data3;            // 8-bit row data from text ROM
    wire ascii_bit_on3, ascii_bit_on1, ascii_bit_on2, ascii_bit2;     // ROM bit and status signal
    wire ascii_bit1, ascii_bit2, ascii_bit3;
    wire ascii_bit_now;
    reg [6:0]offset1,offset2,offset3;
    reg [6:0] num1,num2,num3;
    reg [11:0] num_arr[5:0];
    initial begin
    offset1= 7'b000_0000;   //위치 바꾸는거
    offset2= 7'b000_0001;
    offset3= 7'b000_0010;
    num1 =  7'b000_0010;    //숫자 값 바꾸는거 
    num2 =  7'b000_0100;
    num3 =  7'b000_0001;
 
    end
   
    
    // instantiate ASCII ROM
    ascii_rom rom1(.clk(clk), .addr(rom_addr), .data(rom_data1),.offset(offset1),.num(num1));
    ascii_rom rom2(.clk(clk), .addr(rom_addr), .data(rom_data2),.offset(offset2),.num(num2));
    ascii_rom rom3(.clk(clk), .addr(rom_addr), .data(rom_data3),.offset(offset3),.num(num3));
    
    // ASCII ROM interface
    assign rom_addr = {ascii_char, char_row};   // ROM address is ascii code + row
    assign ascii_bit1 = rom_data1[~bit_addr];     // reverse bit order
    assign ascii_bit2 = rom_data2[~bit_addr];     // reverse bit order
    assign ascii_bit3 = rom_data3[~bit_addr];     // reverse bit order
    
    assign ascii_bit_now = (ascii_char == 7'b011_0000)?ascii_bit1:
                        (ascii_char == 7'b011_0001)?ascii_bit2 : 
                       (ascii_char == 7'b011_0010)?ascii_bit3 :1'b0;
        
         
   // assign ascii_bit3 = (ascii_char == 7'b011_1000)?ascii_bit:1'b0;
    //assign ascii_bit4 = (ascii_char == 7'b011_1001)?ascii_bit:1'b0;
        
    assign ascii_char = {y[5:4], x[7:3]};   // 7-bit ascii code
    assign char_row = y[3:0];               // row number of ascii character rom
    assign bit_addr = x[2:0];               // column number of ascii character rom
    // "on" region in center of screen
    assign ascii_bit_on1 = ((x >= 192 && x < 448) && (y >= 208 && y < 272)) ? ascii_bit_now : 1'b0;
  //  assign ascii_bit_on2 = ((x >= 192 && x < 448) && (y >= 208 && y < 272)) ? ascii_bit2 : 1'b0;
  //  assign ascii_bit_on3 = ((x >= 192 && x < 448) && (y >= 208 && y < 272)) ? ascii_bit2 : 1'b0;
    // rgb multiplexing circuit
    always @*
        if(~video_on)
            rgb = 12'h000;      // blank
        else
            if(ascii_bit_on1)
                rgb = 12'h0F0;  // blue letters
            else
                rgb = 12'hFFF;  // white background
   
endmodule
